import serial
import time
import matplotlib.pyplot as plt

## 1. SERIAL USAGE
# 2. Define the serial port and baud rate for the Arduino connection
arduino_port = "/dev/ttyUSB0"  # Update this with your actual port (e.g., "COM3" on Windows)
baud_rate = 9600
lastmessage = ""

# 3. Create a serial connection
ser = serial.Serial(arduino_port, baud_rate, timeout=1)

# 4. Initialize the plot
plt.ion()  # Turn on interactive mode
fig, ax = plt.subplots()

try:
    # 5. Send data continuously - used to test rate of messages
    while True:
        newmessage = ""
        # 6. Read new message from send.txt
        with open("./send.txt", "r") as f:
            newmessage = f.read().strip()

        print(f"last message: {lastmessage}")
        # 7. Send the new message if it differs from the last one
        if newmessage != lastmessage:
            print(newmessage)

            # 8. SERIAL USAGE: Send the new message to the Arduino
            ser.write(newmessage.encode())
            lastmessage = newmessage

        # 9. Read data from the serial port
        try:
            # 10. SERIAL USAGE: Send a test message (optional)
            ser.write("xy".encode())

            # 11. SERIAL USAGE: Receive data from the Arduino
            if ser.in_waiting > 0:
                data = ser.readline().decode().strip()
                print(f"Received: {data}")

                # 12. Extract depth from received data
                depth = float(data.split("dd")[1].split("tt")[0])

                # 13. Update the plot with the new depth value
                ax.plot(time.time(), depth, "ro")  # Plot a red dot for each depth value
                ax.set_xlim(time.time() - 10, time.time())  # X-axis: Last 10 seconds
                ax.set_ylim(-0.3, 2.5)  # Y-axis limits
                plt.draw()  # Redraw the plot
                plt.pause(0.01)  # Short pause to allow the plot to update
                time.sleep(0.1)

        except Exception as e:
            # 14. Handle any read errors
            print(f"Error: {e}")

except KeyboardInterrupt:
    # 15. Handle interrupt by closing the serial connection
    print("Closing serial connection")
    ser.close()

finally:
    # 16. Ensure the serial connection is closed when exiting
    print("Closing serial connection")
    ser.close()
    # plt.ioff()  # Turn off interactive mode
    # plt.show()  # Show the plot
